#!/usr/bin/php
<?php

/**
 *   888b     d888  .d8888b.   .d8888b.      d8888  888    d8P
 *   8888b   d8888 d88P  Y88b d88P  Y88b    d8P888  888   d8P
 *   88888b.d88888 888    888 888          d8P 888  888  d8P
 *   888Y88888P888 888        888d888b.   d8P  888  888d88K
 *   888 Y888P 888 888        888P "Y88b d88   888  8888888b
 *   888  Y8P  888 888    888 888    888 8888888888 888  Y88b
 *   888   "   888 Y88b  d88P Y88b  d88P       888  888   Y88b
 *   888       888  "Y8888P"   "Y8888P"        888  888    Y88b
 *
 *    - 64-bit 680x0-inspired Virtual Machine and assembler -
 */

declare(strict_types = 1);

/**
 * ClassMapBuilder
 */
class ClassMapBuilder {

    const EXCLUDE_PATTERNS = [
        '.'  => 1,
        '..' => 1
    ];

    const EXCLUDE_DIRS = [
        'src/test' => 1
    ];

    /** @var string[] $aFiles */
    private array $aFiles = [];

    /** @var string[] $aClassMap */
    private array $aClassMap = [];

    /**
     * Main entry point
     *
     * @param string $sSourceDir
     * @param string $sNameSpace
     * @param bool   $bCheckNSOptimisation
     */
    public function execute(string $sSourceDir, string $sNameSpace, bool $bCheckNSOptimisation): void {
        $this->aFiles = [];
        $this->traverse($sSourceDir);
        $this->aClassMap = [];
        echo "Building classmap...\n";
        foreach ($this->aFiles as $sSourcePath) {
            $this->processFile($sSourcePath);
        }
        $sCode = "<?php\n\nnamespace " . $sNameSpace . ";\n\nconst CLASS_MAP = " .
            str_replace(['array (', ')'], ['[', ']'], var_export($this->aClassMap, true)) .
            ";";
        file_put_contents('src/classmap.php', $sCode);

        if ($bCheckNSOptimisation) {
            echo "Testing for global functions accessed within namespace...\n";
            foreach ($this->aFiles as $sFile) {
                $sTest = shell_exec('php -dvld.active=1 -dvld.execute=0 ' . $sFile . ' 2>&1 | grep INIT_NS');
                if (!empty($sTest)) {
                    echo $sFile, ":\n", $sTest, "\n";
                }
            }
        }
    }

    /**
     * Recurse over the directory structure
     *
     * @param string $sDirectory
     */
    private function traverse(string $sDirectory) {
        $oCurrentDir = dir($sDirectory);
        $sDirectory  = rtrim($sDirectory, '/');
        $aSubdirs    = [];

        while (false !== ($sItem = $oCurrentDir->read())) {
            if (isset(self::EXCLUDE_PATTERNS[$sItem])) {
                continue;
            }
            $sPath = $sDirectory . '/' . $sItem;
            if (isset(self::EXCLUDE_DIRS[$sPath]) || is_link($sPath)) {
                continue;
            }
            if (is_dir($sPath)) {
                $aSubdirs[] = $sPath;
            } else {
                if ('.php' === substr($sPath, -4, 4)) {
                    $this->aFiles[] = $sPath;
                }
            }
        }
        foreach ($aSubdirs as $sSubdir) {
            $this->traverse($sSubdir);
        }
    }

    /**
     * Extract namespace, interface, class and trait definitions from a source file
     *
     * @param string $sFile
     */
    private function processFile(string $sFile) {
        $sContent = file_get_contents($sFile);
        preg_match('/^namespace\s+([a-z0-9_\\\]+)/im', $sContent, $aMatches);
        $sNamespace = $aMatches[1] . '\\';
        preg_match_all('/^(class|interface|trait|abstract\s+class|final\s+class)\s+([a-z0-9_]+)/im', $sContent, $aMatches);
        $aMatches = $aMatches[2];
        $sFile    = substr($sFile, 3);
        foreach ($aMatches as $sName) {
            $this->aClassMap[$sNamespace . $sName] = $sFile;
        }
    }
}

$bCheckNSOptimisation = isset($_SERVER['argv'][1]);

(new ClassMapBuilder)->execute('src/', 'ABadCafe\MC64K', $bCheckNSOptimisation);
