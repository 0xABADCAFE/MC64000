#!/usr/bin/php -n
<?php

/**
 *   888b     d888  .d8888b.   .d8888b.      d8888  888    d8P
 *   8888b   d8888 d88P  Y88b d88P  Y88b    d8P888  888   d8P
 *   88888b.d88888 888    888 888          d8P 888  888  d8P
 *   888Y88888P888 888        888d888b.   d8P  888  888d88K
 *   888 Y888P 888 888        888P "Y88b d88   888  8888888b
 *   888  Y8P  888 888    888 888    888 8888888888 888  Y88b
 *   888   "   888 Y88b  d88P Y88b  d88P       888  888   Y88b
 *   888       888  "Y8888P"   "Y8888P"        888  888    Y88b
 *
 *
 */

declare(strict_types = 1);

namespace ABadCafe\MC64K;

require_once '../MC64K.php';

const EXAMPLES = [
    'rts',
    'add.b    #1, r0',
    'add.w    r0, r1',
    'add.l    r1, (r0)',
    'add.l    #200, 30(pc)',                        // Should fail
    'add.q    8(r7, r15.w * 2), 8(r7, r15.w * 4)',
    'add.q    8(r7, r15.w * 2), 8(r7, r15.w * 2)',    // Should optimise source operand
    'bclr.w   #0x3F, d0',
    'bset.q   #0, 0xabadcafe(a0, d0.l * 8)',
    'move.q   #1, #2',                             // Should fail
    'fmoveb.d #1, fp1',
    'fmul.s   #-3.90625e-3, fp15',
    'fdiv.d   #1.28e2, 32(a0, d2.l * 8)',
    'blt.b    d0, d1, .unresolved_local',
    'blt.b    d0, d1, unresolved_global',
    'bgt.w    r0, (r15), -32',
    'bgt.w    r0, (r15), 0x20',
    'bne.q    (r0), (r1), 0xFFFFFFF0',
    'bgt.l    r1, r1, .doesnt_matter'

];

$oParser = new Parser\Instruction\Line;

foreach (EXAMPLES as $sInput) {
    echo $sInput, " => ";
    try {
        echo "Bytecode: ", bin2hex($oParser->parse($sInput));
    } catch (\Throwable $oError) {
        echo get_class($oError), " - ", $oError->getMessage();
    }
    echo "\n";
}
