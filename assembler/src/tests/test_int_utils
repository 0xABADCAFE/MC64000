#!/usr/bin/php
<?php

/**
 *   888b     d888  .d8888b.   .d8888b.      d8888  888    d8P
 *   8888b   d8888 d88P  Y88b d88P  Y88b    d8P888  888   d8P
 *   88888b.d88888 888    888 888          d8P 888  888  d8P
 *   888Y88888P888 888        888d888b.   d8P  888  888d88K
 *   888 Y888P 888 888        888P "Y88b d88   888  8888888b
 *   888  Y8P  888 888    888 888    888 8888888888 888  Y88b
 *   888   "   888 Y88b  d88P Y88b  d88P       888  888   Y88b
 *   888       888  "Y8888P"   "Y8888P"        888  888    Y88b
 *
 *
 */

declare(strict_types = 1);

namespace ABadCafe\MC64K;

require_once '../MC64K.php';

/**
 * TEST_CASES
 *
 * For each machine word size, tests the minimum signed, maximum signed and maximum unsigned values
 * for each supported base/format:
 *
 * Binary: 0bNNNN
 *
 */
const TEST_CASES = [

    Defs\IIntLimits::BYTE => [
        // Binary format 0bN...
        '0b01111111',
        '0b10000000',
        '0b11111111',

        // Binary format %N...
        '%01111111',
        '%10000000',
        '%11111111',

        // Octal 0N...
        '0177',
        '0200',
        '0377',
        '@177',

        // Octal format @N...
        '@200',
        '@377',

        // Decimal format, signed and unsigned
        '127',
        '-128',
        '+127',
        '255',
        '+255',

        // Hexadecimal format 0xN...
        '0x7F',
        '0x80',
        '0xFF',

        // Hexadecimal format $N...
        '$7F',
        '$80',
        '$FF',
    ],

    Defs\IIntLimits::WORD => [
        '0b0111111111111111',
        '0b1000000000000000',
        '0b1111111111111111',
        '%0111111111111111',
        '%1000000000000000',
        '%1111111111111111',
        '@77777',
        '@100000',
        '@177777',
        '077777',
        '0100000',
        '0177777',
        '32767',
        '-32768',
        '+32767',
        '65535',
        '0x7FFF',
        '0x8000',
        '0xFFFF',
        '$7FFF',
        '$8000',
        '$FFFF',
    ],
    Defs\IIntLimits::LONG => [
        '0b01111111111111111111111111111111',
        '0b10000000000000000000000000000000',
        '0b11111111111111111111111111111111',
        '%01111111111111111111111111111111',
        '%10000000000000000000000000000000',
        '%11111111111111111111111111111111',
        '017777777777',
        '020000000000',
        '037777777777',
        '@17777777777',
        '@20000000000',
        '@37777777777',
        '2147483647',
        '-2147483648',
        '+2147483647',
        '4294967295',
        '+4294967295',
        '0x7FFFFFFF',
        '0x80000000',
        '0xFFFFFFFF',
        '$7FFFFFFF',
        '$80000000',
        '$FFFFFFFF',
    ],
    Defs\IIntLimits::QUAD => [
        '0b0111111111111111111111111111111111111111111111111111111111111111',
        '0b1000000000000000000000000000000000000000000000000000000000000000',
        '0b1111111111111111111111111111111111111111111111111111111111111111',
        '%0111111111111111111111111111111111111111111111111111111111111111',
        '%1000000000000000000000000000000000000000000000000000000000000000',
        '%1111111111111111111111111111111111111111111111111111111111111111',
        '0777777777777777777777',
        '01000000000000000000000',
        '01777777777777777777777',
        '@777777777777777777777',
        '@1000000000000000000000',
        '@1777777777777777777777',
        '9223372036854775807',
        '-9223372036854775808',
        '+9223372036854775807',
        '18446744073709551615',
        '+18446744073709551615',
        '0x7FFFFFFFFFFFFFFF',
        '0x8000000000000000',
        '0xFFFFFFFFFFFFFFFF',
        '$7FFFFFFFFFFFFFFF',
        '$8000000000000000',
        '$FFFFFFFFFFFFFFFF',
    ],
];

foreach (TEST_CASES as $iWordSize => $aTestCases) {
    echo "Testing word size ", $iWordSize, "...\n";

    foreach ($aTestCases as $sExpression) {
        echo
            "\t", $sExpression, " => ",
            Parser\Utils\Integer::parseLiteral((string)$sExpression, $iWordSize), "\n";
    }
    echo "\n";
}
