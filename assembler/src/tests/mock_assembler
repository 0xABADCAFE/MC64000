#!/usr/bin/php -n
<?php

/**
 *   888b     d888  .d8888b.   .d8888b.      d8888  888    d8P
 *   8888b   d8888 d88P  Y88b d88P  Y88b    d8P888  888   d8P
 *   88888b.d88888 888    888 888          d8P 888  888  d8P
 *   888Y88888P888 888        888d888b.   d8P  888  888d88K
 *   888 Y888P 888 888        888P "Y88b d88   888  8888888b
 *   888  Y8P  888 888    888 888    888 8888888888 888  Y88b
 *   888   "   888 Y88b  d88P Y88b  d88P       888  888   Y88b
 *   888       888  "Y8888P"   "Y8888P"        888  888    Y88b
 *
 *
 */

declare(strict_types = 1);

namespace ABadCafe\MC64K;

require_once '../MC64K.php';

if (!isset($_SERVER['argv'][1])) {
    echo "No assembler source file specified.\n";
    exit(1);
}

$sSourceFile = $_SERVER['argv'][1];

if (!file_exists($sSourceFile) || !is_readable($sSourceFile)) {
    echo "Source file ", $sSourceFile, " could not be opened.\n";
    exit(1);
}

$oSource = new IO\SourceFile($sSourceFile);
$oParser = new Parser\SourceLine\Processor();
$oState  = State\Coordinator::get();
$oState->setCurrentFile($oSource);
$oOutput = $oState->getOutput();

while ( ($sSourceLine = $oSource->readLine()) ) {
    $sBytecode  = $oParser->parse($sSourceLine);
    $iLength = $sBytecode ? strlen($sBytecode) : 0;
    printf(
        "%4d [%5d]   %-50s : [%2d] %s\n",
        $oSource->getLineNumber(),
        $oOutput->getCurrentStatementPosition(),
        rtrim($sSourceLine),
        $iLength,
        Utils\Binary::format($sBytecode)
    );
    $oOutput->appendStatement($sBytecode);
}

$sBytecodePass1 = Utils\Binary::format($oOutput->getBytecode());

$oSecondPass = new Process\SecondPass();
$oSecondPass->resolveForwardsBranchReferences(
    $oState->getLabelLocation(),
    $oState->getOutput()
);

$sByteCodePass2 = Utils\Binary::format($oOutput->getBytecode());

echo "Pass 1 BC: ", $sBytecodePass1, "\nPass 2 BC: ", $sByteCodePass2, "\n";

preg_match('/\/(\w+)(\.\w+){0,1}$/', $sSourceFile, $aMatches);
$sOutput = 'output/' . $aMatches[1] . '.mc64k';
$oWriter = new IO\Output\Binary($sOutput);
$oWriter->writeChunk($oOutput);
