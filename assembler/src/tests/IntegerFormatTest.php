<?php

/**
 *   888b     d888  .d8888b.   .d8888b.      d8888  888    d8P
 *   8888b   d8888 d88P  Y88b d88P  Y88b    d8P888  888   d8P
 *   88888b.d88888 888    888 888          d8P 888  888  d8P
 *   888Y88888P888 888        888d888b.   d8P  888  888d88K
 *   888 Y888P 888 888        888P "Y88b d88   888  8888888b
 *   888  Y8P  888 888    888 888    888 8888888888 888  Y88b
 *   888   "   888 Y88b  d88P Y88b  d88P       888  888   Y88b
 *   888       888  "Y8888P"   "Y8888P"        888  888    Y88b
 *
 *    - 64-bit 680x0-inspired Virtual Machine and assembler -
 */

declare(strict_types = 1);

namespace ABadCafe\MC64K\Tests;
use ABadCafe\MC64K\Utils\TestCase;
use ABadCafe\MC64K\Defs;
use ABadCafe\MC64K\Parser;

/**
 * IntegerFormatTest
 *
 * Validates the behaviour of Parser\Utils\Integer::parseLiteral() which handles conversion of string literal numbers
 * in varying bases and formatting into a viable 2's complement integer value.
 */
class IntegerFormatTest extends TestCase {

    /**
     * TEST_CASES
     *
     * For each machine word size, tests the minimum signed, maximum signed and maximum unsigned values
     * for each supported base/format.
     */
    const TEST_CASES = [
        Defs\IIntLimits::BYTE => [
            '0b01111111' => 127,
            '0b10000000' => -128,
            '0b11111111' => -1,
            '%01111111' => 127,
            '%10000000' => -128,
            '%11111111' => -1,
            '0177' => 127,
            '0200' => -128,
            '0377' => -1,
            '@177' => 127,
            '@200' => -128,
            '@377' => -1,
            '127'  => 127,
            '-128' => -128,
            '+127' => 127,
            '255'  => -1,
            '+255' => -1,
            '0x7F' => 127,
            '0x80' => -128,
            '0xFF' => -1,
            '$7F' => 127,
            '$80' => -128,
            '$FF' => -1,
        ],

        Defs\IIntLimits::WORD => [
            '0b0111111111111111' => 32767,
            '0b1000000000000000' => -32768,
            '0b1111111111111111' => -1,
            '%0111111111111111'  => 32767,
            '%1000000000000000'  => -32768,
            '%1111111111111111'  => -1,
            '@77777'             => 32767,
            '@100000'            => -32768,
            '@177777'            => -1,
            '077777'             => 32767,
            '0100000'            => -32768,
            '0177777'            => -1,
            '32767'              => 32767,
            '-32768'             => -32768,
            '+32767'             => 32767,
            '65535'              => -1,
            '0x7FFF'             => 32767,
            '0x8000'             => -32768,
            '0xFFFF'             => -1,
            '$7FFF'              => 32767,
            '$8000'              => -32768,
            '$FFFF'              => -1,
        ],

        Defs\IIntLimits::LONG => [
            '0b01111111111111111111111111111111' => 2147483647,
            '0b10000000000000000000000000000000' => -2147483648,
            '0b11111111111111111111111111111111' => -1,
            '%01111111111111111111111111111111'  => 2147483647,
            '%10000000000000000000000000000000'  => -2147483648,
            '%11111111111111111111111111111111'  => -1,
            '017777777777'                       => 2147483647,
            '020000000000'                       => -2147483648,
            '037777777777'                       => -1,
            '@17777777777'                       => 2147483647,
            '@20000000000'                       => -2147483648,
            '@37777777777'                       => -1,
            '2147483647'                         => 2147483647,
            '-2147483648'                        => -2147483648,
            '+2147483647'                        => 2147483647,
            '4294967295'                         => -1,
            '+4294967295'                        => -1,
            '0x7FFFFFFF'                         => 2147483647,
            '0x80000000'                         => -2147483648,
            '0xFFFFFFFF'                         => -1,
            '$7FFFFFFF'                          => 2147483647,
            '$80000000'                          => -2147483648,
            '$FFFFFFFF'                          => -1,
        ],

        Defs\IIntLimits::QUAD => [
            '0b0111111111111111111111111111111111111111111111111111111111111111' => 9223372036854775807,
            '0b1000000000000000000000000000000000000000000000000000000000000000' => -9223372036854775808,
            '0b1111111111111111111111111111111111111111111111111111111111111111' => -1,
            '%0111111111111111111111111111111111111111111111111111111111111111'  => 9223372036854775807,
            '%1000000000000000000000000000000000000000000000000000000000000000'  => -9223372036854775808,
            '%1111111111111111111111111111111111111111111111111111111111111111'  => -1,
            '0777777777777777777777'                                             => 9223372036854775807,
            '01000000000000000000000'                                            => -9223372036854775808,
            '01777777777777777777777'                                            => -1,
            '@777777777777777777777'                                             => 9223372036854775807,
            '@1000000000000000000000'                                            => -9223372036854775808,
            '@1777777777777777777777'                                            => -1,
            '9223372036854775807'                                                => 9223372036854775807,
            '-9223372036854775808'                                               => -9223372036854775808,
            '+9223372036854775807'                                               => 9223372036854775807,
            '18446744073709551615'                                               => -1,
            '+18446744073709551615'                                              => -1,
            '0x7FFFFFFFFFFFFFFF'                                                 => 9223372036854775807,
            '0x8000000000000000'                                                 => -9223372036854775808,
            '0xFFFFFFFFFFFFFFFF'                                                 => -1,
            '$7FFFFFFFFFFFFFFF'                                                  => 9223372036854775807,
            '$8000000000000000'                                                  => -9223372036854775808,
            '$FFFFFFFFFFFFFFFF'                                                  => -1,
        ],
    ];

    /**
     * @inheritDoc
     */
    public function run(): void {
        foreach (self::TEST_CASES as $iWordSize => $aTestCases) {
            echo "\ttesting: <num> (", $iWordSize, " byte)\n";
            foreach ($aTestCases as $sExpression => $iExpect) {
                $iResult = Parser\Utils\Integer::parseLiteral((string)$sExpression, $iWordSize);
                $this->assertEqual($iExpect, $iResult);
            }
        }
    }
}

