#!/usr/bin/php -n
<?php

/**
 *   888b     d888  .d8888b.   .d8888b.      d8888  888    d8P
 *   8888b   d8888 d88P  Y88b d88P  Y88b    d8P888  888   d8P
 *   88888b.d88888 888    888 888          d8P 888  888  d8P
 *   888Y88888P888 888        888d888b.   d8P  888  888d88K
 *   888 Y888P 888 888        888P "Y88b d88   888  8888888b
 *   888  Y8P  888 888    888 888    888 8888888888 888  Y88b
 *   888   "   888 Y88b  d88P Y88b  d88P       888  888   Y88b
 *   888       888  "Y8888P"   "Y8888P"        888  888    Y88b
 *
 *
 */

declare(strict_types = 1);

namespace ABadCafe\MC64K;

require_once '../MC64K.php';

class DummyChunk implements IO\Output\IBinaryChunk {

    private string $sType, $sBody;

    public function __construct(string $sType, string $sBody) {
        $this->sType = $sType;
        $this->sBody = $sBody;
    }

    /**
     * Returns the chunk ID (8 bytes)
     *
     * @return string
     */
    public function getChunkType() : string {
        return $this->sType;
    }

    /**
     * Returns the chunk length in bytes (not including the type header)
     */
    public function getChunkLength() : int {
        return strlen($this->sBody);
    }

    /**
     * Returns the chunk data
     */
    public function getChunkData() : string {
        return $this->sBody;
    }
}

$oList   = new IO\Output\ChunkList;
$oDummy1 = new DummyChunk('TSTCHNK1', 'Hello world');
$oDummy2 = new DummyChunk('TSTCHNK2', 'Whatever, dude');

$oList->registerChunk($oDummy1);
$oList->registerChunk($oDummy2);

$oWriter = new IO\Output\Binary('output/test.mc64k');
$iLength = $oWriter->writeChunk($oList);
$iLength += $oWriter->writeChunk($oDummy1);
$iLength += $oWriter->writeChunk($oDummy2);
echo $iLength, " bytes written.\n";
