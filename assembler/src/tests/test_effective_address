#!/usr/bin/php -n
<?php

/**
 *
 *
 */

declare(strict_types = 1);

namespace ABadCafe\MC64K;

require_once '../MC64K.php';

use ABadCafe\MC64K\Defs\EffectiveAddress;

class TestParser {

    private array $aRegex;

    /**
     * Constructor
     */
    public function __construct() {
        $this->aRegex      = EffectiveAddress\IMatches::MATCHES;
        $this->aMatchCount = array_fill_keys(
            range(EffectiveAddress\IModes::MIN_BYTE, EffectiveAddress\IModes::MAX_BYTE),
            0
        );
    }

    public function match(string $sText) {
        foreach ($this->aRegex as $sMatch => $iMode) {
            if (false === preg_match($sMatch, $sText, $aMatches)) {
                throw new \Exception( $sMatch );
            }
            if (!empty($aMatches)) {
                ++$this->aMatchCount[$iMode];
                return;
            }
        }
        echo "No EA match for '", $sText, "'\n";
    }

    public function report() {
        echo "Match counts\n";
        foreach ($this->aMatchCount as $iMode => $iCount) {
            printf(
                "\t%d [%s] %d\n",
                $iMode,
                EffectiveAddress\IModes::NAMES[$iMode],
                $iCount
            );
        }
    }
}

$oTestParser = new TestParser;

$aExamples = explode("\n", file_get_contents('text/ea.txt'));

foreach ($aExamples as $sExample) {
    $sExample = trim($sExample);
    if (empty($sExample) || '/' === $sExample[0]) {
        continue;
    }
    $oTestParser->match($sExample);
}
$oTestParser->report();
