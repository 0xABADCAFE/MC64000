#!/usr/bin/php -n
<?php

/**
 *   888b     d888  .d8888b.   .d8888b.      d8888  888    d8P
 *   8888b   d8888 d88P  Y88b d88P  Y88b    d8P888  888   d8P
 *   88888b.d88888 888    888 888          d8P 888  888  d8P
 *   888Y88888P888 888        888d888b.   d8P  888  888d88K
 *   888 Y888P 888 888        888P "Y88b d88   888  8888888b
 *   888  Y8P  888 888    888 888    888 8888888888 888  Y88b
 *   888   "   888 Y88b  d88P Y88b  d88P       888  888   Y88b
 *   888       888  "Y8888P"   "Y8888P"        888  888    Y88b
 *
 *
 */

declare(strict_types = 1);

namespace ABadCafe\MC64K;

require_once '../MC64K.php';

const INT_IMMEDIATES = [
    // Small integer immediate
    '#0', '#1', '#2', '#3', '#4', '#5', '#6', '#7', '#8',
    '#0x0', '#0x1', '#0x02', '#0x0003', '#0x00000008',
    '#0x0000000000000007',

    // Byte immediate
    '#9', '#-1', '#9', '#-128', '#127',
    '#0x09', '#0x1A', '#0x7F', '#0xFF', '#0xFFFF', '#0xFFFFFFFF',
    '#0xFFFFFFFFFFFFFFFF',

    // Word immediates
    '#128', '#-129', '#16384', '#-32768', '#32767',
    '#0x00FF', '#0x7FFF', '#0x00007FFF',

    // Long immediates
    '#32768', '#-32769', '#65536', '#2147483647', '#-2147483648',
    '#0x00FFFF', '#0x0000FFFF', '#0xFFFF0000',
    '#0xFFFFFFFFFFFF0000',

    // Quad immediates
    '#2147483648', '#-2147483649', '#' . PHP_INT_MAX, '#' . PHP_INT_MIN,
    '#0x8000000000000000', '#0x0123456789ABCDEF',
];

const FLOAT_IMMEDIATES = [
    // Float immediates
    '#0.', '#-1.', '#1.', '#+1.',
    '#1.0123456789e-10',
    '#1.s', '#1.25s', '#1.e30s',
    '#4.e38d',
];

const SIMPLE_INDIRECT = [
    '(r0)', '(a0)', '(r8)', '(a7)', '(r15)', '(sp)',
    '-(r0)', '+(a0)', '(r8)-',
    '-(sp)', '+(sp)',
];


function test(IParser $oParser, array $aExamples) {
    echo "Testing ", get_class($oParser), "...\n";
    foreach ($aExamples as $sExample) {
        $sResult = $oParser->parse($sExample);
        echo "\t", $sExample, " => ", $sResult ? bin2hex($sResult) : 'null', "\n";
    }
}

test(new Parser\EffectiveAddress\IntImmediate, INT_IMMEDIATES);
test(new Parser\EffectiveAddress\FloatImmediate, FLOAT_IMMEDIATES);
test(new Parser\EffectiveAddress\GPRDirect, array_keys(Defs\Register\INames::GPR_MAP));
test(new Parser\EffectiveAddress\FPRDirect, array_keys(Defs\Register\INames::FPR_MAP));
test(new Parser\EffectiveAddress\GPRIndirect, SIMPLE_INDIRECT);


